
import os
import asyncio
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫. –ë—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏ –∑ —Å–∞–π—Ç—É!")

# –§—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–∞–π—Ç—É
def get_signals():
    signals = []
    url = "https://www.inforadar.live/matches"  # –ø—Ä–∏–∫–ª–∞–¥
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        # –ü—Ä–∏–∫–ª–∞–¥: –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –º–∞—Ç—á—ñ —Ç–∞ —ó—Ö –≤—ñ–¥—Å–æ—Ç–∫–∏ –Ω–∞ —Ç–æ—Ç–∞–ª–∏
        matches = soup.find_all("div", class_="match-row")
        for match in matches:
            team1 = match.find("div", class_="team1").text.strip()
            team2 = match.find("div", class_="team2").text.strip()
            total_percent = match.find("span", class_="total-percent").text.strip().replace("%","")
            try:
                total_percent = int(total_percent)
                if total_percent >= 70:
                    signals.append(f"üì¢ {team1} ‚Äì {team2} | –¢–æ—Ç–∞–ª –±—ñ–ª—å—à–µ 2.5: {total_percent}%")
            except:
                continue
    return signals

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤
async def send_signals():
    signals = get_signals()
    for signal in signals:
        await bot.send_message(chat_id=CHAT_ID, text=signal)

async def scheduler():
    while True:
        await send_signals()
        await asyncio.sleep(300)  # –∫–æ–∂–Ω—ñ 5 —Ö–≤

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    executor.start_polling(dp, skip_updates=True)
